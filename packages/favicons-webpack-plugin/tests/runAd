compileTemplate6::childCompiler Compiler {
      _pluginCompat:
       SyncBailHook {
         _args: [ 'options' ],
         taps: [ [Object], [Object], [Object] ],
         interceptors: [],
         _call: [Function: lazyCompileHook],
         call: [Function: lazyCompileHook],
         _promise: [Function: lazyCompileHook],
         promise: [Function: lazyCompileHook],
         _callAsync: [Function: lazyCompileHook],
         callAsync: [Function: lazyCompileHook],
         _x: undefined },
      hooks:
       { shouldEmit:
          SyncBailHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         done:
          AsyncSeriesHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         additionalPass:
          AsyncSeriesHook {
            _args: [],
            taps: [],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         beforeRun:
          AsyncSeriesHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         run:
          AsyncSeriesHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         emit:
          AsyncSeriesHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         afterEmit:
          AsyncSeriesHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         thisCompilation:
          SyncHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         compilation:
          SyncHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         normalModuleFactory:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         contextModuleFactory:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         beforeCompile:
          AsyncSeriesHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         compile:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         make:
          AsyncParallelHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         afterCompile:
          AsyncSeriesHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         watchRun:
          AsyncSeriesHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: undefined,
            call: undefined,
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         failed:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         invalid:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         watchClose:
          SyncHook {
            _args: [],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         environment:
          SyncHook {
            _args: [],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         afterEnvironment:
          SyncHook {
            _args: [],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         afterPlugins:
          SyncHook {
            _args: [Array],
            taps: [],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         afterResolvers:
          SyncHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         entryOption:
          SyncBailHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined } },
      name: 'favicons-webpack-plugin for "iconstats-[hash].json"',
      parentCompilation:
       Compilation {
         _pluginCompat:
          SyncBailHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         hooks:
          { buildModule: [SyncHook],
            rebuildModule: [SyncHook],
            failedModule: [SyncHook],
            succeedModule: [SyncHook],
            dependencyReference: [SyncWaterfallHook],
            finishModules: [SyncHook],
            finishRebuildingModule: [SyncHook],
            unseal: [SyncHook],
            seal: [SyncHook],
            beforeChunks: [SyncHook],
            afterChunks: [SyncHook],
            optimizeDependenciesBasic: [SyncBailHook],
            optimizeDependencies: [SyncBailHook],
            optimizeDependenciesAdvanced: [SyncBailHook],
            afterOptimizeDependencies: [SyncHook],
            optimize: [SyncHook],
            optimizeModulesBasic: [SyncBailHook],
            optimizeModules: [SyncBailHook],
            optimizeModulesAdvanced: [SyncBailHook],
            afterOptimizeModules: [SyncHook],
            optimizeChunksBasic: [SyncBailHook],
            optimizeChunks: [SyncBailHook],
            optimizeChunksAdvanced: [SyncBailHook],
            afterOptimizeChunks: [SyncHook],
            optimizeTree: [AsyncSeriesHook],
            afterOptimizeTree: [SyncHook],
            optimizeChunkModulesBasic: [SyncBailHook],
            optimizeChunkModules: [SyncBailHook],
            optimizeChunkModulesAdvanced: [SyncBailHook],
            afterOptimizeChunkModules: [SyncHook],
            shouldRecord: [SyncBailHook],
            reviveModules: [SyncHook],
            optimizeModuleOrder: [SyncHook],
            advancedOptimizeModuleOrder: [SyncHook],
            beforeModuleIds: [SyncHook],
            moduleIds: [SyncHook],
            optimizeModuleIds: [SyncHook],
            afterOptimizeModuleIds: [SyncHook],
            reviveChunks: [SyncHook],
            optimizeChunkOrder: [SyncHook],
            beforeChunkIds: [SyncHook],
            optimizeChunkIds: [SyncHook],
            afterOptimizeChunkIds: [SyncHook],
            recordModules: [SyncHook],
            recordChunks: [SyncHook],
            beforeHash: [SyncHook],
            contentHash: [SyncHook],
            afterHash: [SyncHook],
            recordHash: [SyncHook],
            record: [SyncHook],
            beforeModuleAssets: [SyncHook],
            shouldGenerateChunkAssets: [SyncBailHook],
            beforeChunkAssets: [SyncHook],
            additionalChunkAssets: [SyncHook],
            additionalAssets: [AsyncSeriesHook],
            optimizeChunkAssets: [AsyncSeriesHook],
            afterOptimizeChunkAssets: [SyncHook],
            optimizeAssets: [AsyncSeriesHook],
            afterOptimizeAssets: [SyncHook],
            needAdditionalSeal: [SyncBailHook],
            afterSeal: [AsyncSeriesHook],
            chunkHash: [SyncHook],
            moduleAsset: [SyncHook],
            chunkAsset: [SyncHook],
            assetPath: [SyncWaterfallHook],
            needAdditionalPass: [SyncBailHook],
            childCompiler: [SyncHook],
            normalModuleLoader: [SyncHook],
            optimizeExtractedChunksBasic: [SyncBailHook],
            optimizeExtractedChunks: [SyncBailHook],
            optimizeExtractedChunksAdvanced: [SyncBailHook],
            afterOptimizeExtractedChunks: [SyncHook] },
         name: undefined,
         compiler:
          Compiler {
            _pluginCompat: [SyncBailHook],
            hooks: [Object],
            name: undefined,
            parentCompilation: undefined,
            outputPath:
             '/Users/gr172/Development/NL/favicons-webpack-plugin/dist/test-1',
            outputFileSystem: [NodeOutputFileSystem],
            inputFileSystem: [CachedInputFileSystem],
            recordsInputPath: undefined,
            recordsOutputPath: undefined,
            records: [Object],
            fileTimestamps: Map {},
            contextTimestamps: Map {},
            resolverFactory: [ResolverFactory],
            resolvers: [Object],
            options: [Object],
            context: '/Users/gr172/Development/NL/favicons-webpack-plugin',
            requestShortener: [RequestShortener],
            running: true,
            watchFileSystem: [NodeWatchFileSystem],
            dependencies: undefined },
         resolverFactory:
          ResolverFactory {
            _pluginCompat: [SyncBailHook],
            hooks: [Object],
            cache1: [WeakMap],
            cache2: Map {} },
         inputFileSystem:
          CachedInputFileSystem {
            fileSystem: NodeJsInputFileSystem {},
            _statStorage: [Storage],
            _readdirStorage: [Storage],
            _readFileStorage: [Storage],
            _readJsonStorage: [Storage],
            _readlinkStorage: [Storage],
            _stat: [Function: bound bound ],
            _statSync: [Function: bound bound ],
            _readdir: [Function: bound readdir],
            _readdirSync: [Function: bound readdirSync],
            _readFile: [Function: bound bound readFile],
            _readFileSync: [Function: bound bound readFileSync],
            _readJson: [Function],
            _readJsonSync: [Function],
            _readlink: [Function: bound bound readlink],
            _readlinkSync: [Function: bound bound readlinkSync] },
         requestShortener:
          RequestShortener {
            currentDirectoryRegExp:
             /(^|!)\/Users\/gr172\/Development\/NL\/favicons\-webpack\-plugin/g,
            parentDirectoryRegExp: /(^|!)\/Users\/gr172\/Development\/NL/g,
            buildinsAsModule: false,
            buildinsRegExp:
             /(^|!)\/Users\/gr172\/Development\/NL\/lex\/node_modules\/webpack/g,
            cache: Map {} },
         options:
          { devtool: 'eval',
            entry:
             '/Users/gr172/Development/NL/favicons-webpack-plugin/tests/fixtures/entry.js',
            mode: 'development',
            output: [Object],
            plugins: [Array],
            cache: true,
            context: '/Users/gr172/Development/NL/favicons-webpack-plugin',
            target: 'web',
            module: [Object],
            node: [Object],
            performance: false,
            optimization: [Object],
            resolve: [Object],
            resolveLoader: [Object] },
         outputOptions:
          { path:
             '/Users/gr172/Development/NL/favicons-webpack-plugin/dist/test-1',
            filename: '[name].js',
            chunkFilename: '[name].js',
            webassemblyModuleFilename: '[modulehash].module.wasm',
            library: '',
            hotUpdateFunction: 'webpackHotUpdate',
            jsonpFunction: 'webpackJsonp',
            chunkCallbackName: 'webpackChunk',
            globalObject: 'window',
            devtoolNamespace: '',
            libraryTarget: 'var',
            pathinfo: true,
            sourceMapFilename: '[file].map[query]',
            hotUpdateChunkFilename: '[id].[hash].hot-update.js',
            hotUpdateMainFilename: '[hash].hot-update.json',
            crossOriginLoading: false,
            jsonpScriptType: false,
            chunkLoadTimeout: 120000,
            hashFunction: 'md4',
            hashDigest: 'hex',
            hashDigestLength: 20,
            devtoolLineToLine: false,
            strictModuleExceptionHandling: false },
         bail: undefined,
         profile: undefined,
         performance: false,
         mainTemplate:
          MainTemplate {
            _pluginCompat: [SyncBailHook],
            outputOptions: [Object],
            hooks: [Object],
            requireFn: '__webpack_require__' },
         chunkTemplate:
          ChunkTemplate {
            _pluginCompat: [SyncBailHook],
            outputOptions: [Object],
            hooks: [Object] },
         hotUpdateChunkTemplate:
          HotUpdateChunkTemplate {
            _pluginCompat: [SyncBailHook],
            outputOptions: [Object],
            hooks: [Object] },
         runtimeTemplate:
          RuntimeTemplate {
            outputOptions: [Object],
            requestShortener: [RequestShortener] },
         moduleTemplates:
          { javascript: [ModuleTemplate], webassembly: [ModuleTemplate] },
         semaphore:
          Semaphore {
            available: 100,
            waiters: [],
            _continue: [Function: bound _continue] },
         entries: [],
         _preparedEntrypoints: [],
         entrypoints: Map {},
         chunks: [],
         chunkGroups: [],
         namedChunkGroups: Map {},
         namedChunks: Map {},
         modules: [],
         _modules: Map {},
         cache: { children: [Object] },
         records:
          { 'favicons-webpack-plugin for "iconstats-[hash].json"': [Array] },
         additionalChunkAssets: [],
         assets: {},
         errors: [],
         warnings: [],
         children: [],
         dependencyFactories:
          Map {
            [Function: WebAssemblyImportDependency] => [NormalModuleFactory],
            [Function: WebAssemblyExportImportedDependency] => [NormalModuleFactory],
            [Function: SingleEntryDependency] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => [ContextModuleFactory],
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function] => [NormalModuleFactory],
            [Function] => [ContextModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => [ContextModuleFactory],
            [Function] => NullFactory {},
            [Function] => NullFactory {},
            [Function: LoaderDependency] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => NullFactory {},
            [Function] => [ContextModuleFactory],
            [Function: ContextElementDependency] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => [NormalModuleFactory],
            [Function] => [ContextModuleFactory] },
         dependencyTemplates:
          Map {
            'hash' => '',
            [Function] => ConstDependencyTemplate {},
            [Function] => HarmonyExportDependencyTemplate {},
            [Function] => HarmonyInitDependencyTemplate {},
            [Function] => HarmonyImportSideEffectDependencyTemplate {},
            [Function] => HarmonyImportSpecifierDependencyTemplate {},
            [Function] => HarmonyExportDependencyTemplate {},
            [Function] => HarmonyExportDependencyTemplate {},
            [Function] => HarmonyExportSpecifierDependencyTemplate {},
            [Function] => HarmonyExportImportedSpecifierDependencyTemplate {},
            [Function] => HarmonyAcceptDependencyTemplate {},
            [Function] => HarmonyAcceptImportDependencyTemplate {},
            [Function] => AMDRequireDependencyTemplate {},
            [Function] => ModuleDependencyTemplateAsRequireId {},
            [Function] => AMDRequireArrayDependencyTemplate {},
            [Function] => ContextDependencyTemplateAsRequireCall {},
            [Function] => AMDDefineDependencyTemplate {},
            [Function] => UnsupportedDependencyTemplate {},
            [Function] => LocalModuleDependencyTemplate {},
            [Function] => ModuleDependencyTemplateAsId {},
            [Function] => ContextDependencyTemplateAsRequireCall {},
            [Function] => ModuleDependencyTemplateAsId {},
            [Function] => ContextDependencyTemplateAsId {},
            [Function] => RequireResolveHeaderDependencyTemplate {},
            [Function] => RequireHeaderDependencyTemplate {},
            [Function] => RequireIncludeDependencyTemplate {},
            [Function] => NullDependencyTemplate {},
            [Function] => RequireEnsureDependencyTemplate {},
            [Function] => ModuleDependencyTemplateAsRequireId {},
            [Function] => ImportDependencyTemplate {},
            [Function] => ImportEagerDependencyTemplate {},
            [Function] => ImportDependencyTemplate {},
            [Function] => ContextDependencyTemplateAsRequireCall {} },
         childrenCounters: { 'favicons-webpack-plugin for "iconstats-[hash].json"': 1 },
         usedChunkIds: null,
         usedModuleIds: null,
         fileTimestamps: Map {},
         contextTimestamps: Map {},
         compilationDependencies: Set {},
         _buildingModules: Map {},
         _rebuildingModules: Map {} },
      outputPath:
       '/Users/gr172/Development/NL/favicons-webpack-plugin/dist/test-1',
      outputFileSystem: null,
      inputFileSystem:
       CachedInputFileSystem {
         fileSystem: NodeJsInputFileSystem {},
         _statStorage:
          Storage {
            duration: 60000,
            running: Map {},
            data: Map {},
            levels: [Array],
            count: 0,
            interval: null,
            needTickCheck: false,
            nextTick: null,
            passive: true,
            tick: [Function: bound tick] },
         _readdirStorage:
          Storage {
            duration: 60000,
            running: Map {},
            data: Map {},
            levels: [Array],
            count: 0,
            interval: null,
            needTickCheck: false,
            nextTick: null,
            passive: true,
            tick: [Function: bound tick] },
         _readFileStorage:
          Storage {
            duration: 60000,
            running: Map {},
            data: Map {},
            levels: [Array],
            count: 0,
            interval: null,
            needTickCheck: false,
            nextTick: null,
            passive: true,
            tick: [Function: bound tick] },
         _readJsonStorage:
          Storage {
            duration: 60000,
            running: Map {},
            data: Map {},
            levels: [Array],
            count: 0,
            interval: null,
            needTickCheck: false,
            nextTick: null,
            passive: true,
            tick: [Function: bound tick] },
         _readlinkStorage:
          Storage {
            duration: 60000,
            running: Map {},
            data: Map {},
            levels: [Array],
            count: 0,
            interval: null,
            needTickCheck: false,
            nextTick: null,
            passive: true,
            tick: [Function: bound tick] },
         _stat: [Function: bound bound ],
         _statSync: [Function: bound bound ],
         _readdir: [Function: bound readdir],
         _readdirSync: [Function: bound readdirSync],
         _readFile: [Function: bound bound readFile],
         _readFileSync: [Function: bound bound readFileSync],
         _readJson: [Function],
         _readJsonSync: [Function],
         _readlink: [Function: bound bound readlink],
         _readlinkSync: [Function: bound bound readlinkSync] },
      recordsInputPath: null,
      recordsOutputPath: null,
      records: {},
      fileTimestamps: Map {},
      contextTimestamps: Map {},
      resolverFactory:
       ResolverFactory {
         _pluginCompat:
          SyncBailHook {
            _args: [Array],
            taps: [Array],
            interceptors: [],
            _call: [Function: lazyCompileHook],
            call: [Function: lazyCompileHook],
            _promise: [Function: lazyCompileHook],
            promise: [Function: lazyCompileHook],
            _callAsync: [Function: lazyCompileHook],
            callAsync: [Function: lazyCompileHook],
            _x: undefined },
         hooks: { resolveOptions: [HookMap], resolver: [HookMap] },
         cache1: WeakMap { [items unknown] },
         cache2: Map {} },
      resolvers:
       { normal:
          { plugins: [Function: deprecated],
            apply: [Function: deprecated] },
         loader:
          { plugins: [Function: deprecated],
            apply: [Function: deprecated] },
         context:
          { plugins: [Function: deprecated],
            apply: [Function: deprecated] } },
      options:
       { output: { filename: 'iconstats-[hash].json', publicPath: undefined } },
      context: '/Users/gr172/Development/NL/favicons-webpack-plugin',
      requestShortener:
       RequestShortener {
         currentDirectoryRegExp:
          /(^|!)\/Users\/gr172\/Development\/NL\/favicons\-webpack\-plugin/g,
         parentDirectoryRegExp: /(^|!)\/Users\/gr172\/Development\/NL/g,
         buildinsAsModule: false,
         buildinsRegExp:
          /(^|!)\/Users\/gr172\/Development\/NL\/lex\/node_modules\/webpack/g,
         cache: Map {} },
      running: false }
